"""
Service for managing student enrollments, progress tracking, and learning analytics

This microservice is part of the Course Creator platform.
Generated by Software Engineer Agent on 2025-06-26 09:23:50
"""

import logging
from contextlib import asynccontextmanager
from typing import Dict, Any

from fastapi import FastAPI, HTTPException, Depends
from starlette.middleware.cors import CORSMiddleware
from starlette.middleware.trustedhost import TrustedHostMiddleware
import uvicorn

from ...shared.utils.config_manager import config_manager
from ...shared.utils.logging import setup_logging
from .routers import enroll_student_router, get_enrollment_router, list_enrollments_router, update_enrollment_router, unenroll_student_router, get_student_courses_router, get_course_students_router, update_lesson_progress_router, get_course_progress_router, get_student_progress_router, mark_lesson_complete_router, get_certificates_router, issue_certificate_router
from .dependencies import get_database, get_redis
from .middleware import logging_middleware, cors_middleware, authentication_middleware

# Setup logging
logger = setup_logging()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management"""
    logger.info(f"Starting enrollment service on port 8004")
    yield
    logger.info(f"Shutting down enrollment service")

# Create FastAPI application
app = FastAPI(
    title="Service for managing student enrollments, progress tracking, and learning analytics",
    description="Service for managing student enrollments, progress tracking, and learning analytics for the Course Creator platform",
    version="1.0.0",
    lifespan=lifespan
)

# Get service configuration
config = config_manager.get_service_config("enrollment")

# Add middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=config.get("cors_origins", ["*"]),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=config.get("allowed_hosts", ["*"])
)

# Add custom middleware
app.add_middleware(logging_middleware)
app.add_middleware(cors_middleware)
app.add_middleware(authentication_middleware)

# Include routers
app.include_router(enroll_student_router, prefix="/enroll_student", tags=["enroll_student"])
app.include_router(get_enrollment_router, prefix="/get_enrollment", tags=["get_enrollment"])
app.include_router(list_enrollments_router, prefix="/list_enrollments", tags=["list_enrollments"])
app.include_router(update_enrollment_router, prefix="/update_enrollment", tags=["update_enrollment"])
app.include_router(unenroll_student_router, prefix="/unenroll_student", tags=["unenroll_student"])
app.include_router(get_student_courses_router, prefix="/get_student_courses", tags=["get_student_courses"])
app.include_router(get_course_students_router, prefix="/get_course_students", tags=["get_course_students"])
app.include_router(update_lesson_progress_router, prefix="/update_lesson_progress", tags=["update_lesson_progress"])
app.include_router(get_course_progress_router, prefix="/get_course_progress", tags=["get_course_progress"])
app.include_router(get_student_progress_router, prefix="/get_student_progress", tags=["get_student_progress"])
app.include_router(mark_lesson_complete_router, prefix="/mark_lesson_complete", tags=["mark_lesson_complete"])
app.include_router(get_certificates_router, prefix="/get_certificates", tags=["get_certificates"])
app.include_router(issue_certificate_router, prefix="/issue_certificate", tags=["issue_certificate"])

@app.get("/health")
async def health_check() -> Dict[str, Any]:
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "enrollment",
        "version": "1.0.0",
        "timestamp": "2025-06-26T09:23:50.133954"
    }

@app.get("/")
async def root() -> Dict[str, str]:
    """Root endpoint"""
    return {
        "message": "Service for managing student enrollments, progress tracking, and learning analytics",
        "service": "enrollment",
        "version": "1.0.0"
    }

if __name__ == "__main__":
    uvicorn.run(
        app,
        host=config.get("host", "0.0.0.0"),
        port=config.get("port", 8004),
        workers=config.get("workers", 1)
    )
