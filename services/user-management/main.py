"""
User authentication, authorization, and profile management service

This microservice is part of the Course Creator platform.
Generated by Software Engineer Agent on 2025-06-26 09:19:05
"""

import logging
from contextlib import asynccontextmanager
from typing import Dict, Any

from fastapi import FastAPI, HTTPException, Depends
from starlette.middleware.cors import CORSMiddleware
from starlette.middleware.trustedhost import TrustedHostMiddleware
import uvicorn

from ...shared.utils.config_manager import config_manager
from ...shared.utils.logging import setup_logging
from .routers import register_router, login_router, refresh_token_router, logout_router, get_profile_router, update_profile_router, list_users_router, change_password_router, verify_email_router
from .dependencies import get_database, get_redis
from .middleware import logging_middleware, cors_middleware, authentication_middleware

# Setup logging
logger = setup_logging()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management"""
    logger.info(f"Starting user-management service on port 8002")
    yield
    logger.info(f"Shutting down user-management service")

# Create FastAPI application
app = FastAPI(
    title="User authentication, authorization, and profile management service",
    description="User authentication, authorization, and profile management service for the Course Creator platform",
    version="1.0.0",
    lifespan=lifespan
)

# Get service configuration
config = config_manager.get_service_config("user_management")

# Add middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=config.get("cors_origins", ["*"]),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=config.get("allowed_hosts", ["*"])
)

# Add custom middleware
app.add_middleware(logging_middleware)
app.add_middleware(cors_middleware)
app.add_middleware(authentication_middleware)

# Include routers
app.include_router(register_router, prefix="/register", tags=["register"])
app.include_router(login_router, prefix="/login", tags=["login"])
app.include_router(refresh_token_router, prefix="/refresh_token", tags=["refresh_token"])
app.include_router(logout_router, prefix="/logout", tags=["logout"])
app.include_router(get_profile_router, prefix="/get_profile", tags=["get_profile"])
app.include_router(update_profile_router, prefix="/update_profile", tags=["update_profile"])
app.include_router(list_users_router, prefix="/list_users", tags=["list_users"])
app.include_router(change_password_router, prefix="/change_password", tags=["change_password"])
app.include_router(verify_email_router, prefix="/verify_email", tags=["verify_email"])

@app.get("/health")
async def health_check() -> Dict[str, Any]:
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "user-management",
        "version": "1.0.0",
        "timestamp": "2025-06-26T09:19:05.168449"
    }

@app.get("/")
async def root() -> Dict[str, str]:
    """Root endpoint"""
    return {
        "message": "User authentication, authorization, and profile management service",
        "service": "user-management",
        "version": "1.0.0"
    }

if __name__ == "__main__":
    uvicorn.run(
        app,
        host=config.get("host", "0.0.0.0"),
        port=config.get("port", 8002),
        workers=config.get("workers", 1)
    )
