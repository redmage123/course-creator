"""
Core service for creating, managing, and organizing courses with metadata, structure, and content organization

This microservice is part of the Course Creator platform.
Generated by Software Engineer Agent on 2025-06-26 09:14:56
"""

import logging
from contextlib import asynccontextmanager
from typing import Dict, Any

from fastapi import FastAPI, HTTPException, Depends
from starlette.middleware.cors import CORSMiddleware
from starlette.middleware.trustedhost import TrustedHostMiddleware
import uvicorn

from ...shared.utils.config_manager import config_manager
from ...shared.utils.logging import setup_logging
from .routers import courses_router, create_course_router, get_course_router, update_course_router, delete_course_router, course_lessons_router, add_lesson_router, get_lesson_router, update_lesson_router, delete_lesson_router, publish_course_router
from .dependencies import get_database, get_redis
from .middleware import logging_middleware, cors_middleware

# Setup logging
logger = setup_logging()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management"""
    logger.info(f"Starting course-management service on port 8001")
    yield
    logger.info(f"Shutting down course-management service")

# Create FastAPI application
app = FastAPI(
    title="Core service for creating, managing, and organizing courses with metadata, structure, and content organization",
    description="Core service for creating, managing, and organizing courses with metadata, structure, and content organization for the Course Creator platform",
    version="1.0.0",
    lifespan=lifespan
)

# Get service configuration
config = config_manager.get_service_config("course_management")

# Add middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=config.get("cors_origins", ["*"]),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=config.get("allowed_hosts", ["*"])
)

# Add custom middleware
app.add_middleware(logging_middleware)
app.add_middleware(cors_middleware)

# Include routers
app.include_router(courses_router, prefix="/courses", tags=["courses"])
app.include_router(create_course_router, prefix="/create_course", tags=["create_course"])
app.include_router(get_course_router, prefix="/get_course", tags=["get_course"])
app.include_router(update_course_router, prefix="/update_course", tags=["update_course"])
app.include_router(delete_course_router, prefix="/delete_course", tags=["delete_course"])
app.include_router(course_lessons_router, prefix="/course_lessons", tags=["course_lessons"])
app.include_router(add_lesson_router, prefix="/add_lesson", tags=["add_lesson"])
app.include_router(get_lesson_router, prefix="/get_lesson", tags=["get_lesson"])
app.include_router(update_lesson_router, prefix="/update_lesson", tags=["update_lesson"])
app.include_router(delete_lesson_router, prefix="/delete_lesson", tags=["delete_lesson"])
app.include_router(publish_course_router, prefix="/publish_course", tags=["publish_course"])

@app.get("/health")
async def health_check() -> Dict[str, Any]:
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "course-management",
        "version": "1.0.0",
        "timestamp": "2025-06-26T09:14:56.399398"
    }

@app.get("/")
async def root() -> Dict[str, str]:
    """Root endpoint"""
    return {
        "message": "Core service for creating, managing, and organizing courses with metadata, structure, and content organization",
        "service": "course-management",
        "version": "1.0.0"
    }

if __name__ == "__main__":
    uvicorn.run(
        app,
        host=config.get("host", "0.0.0.0"),
        port=config.get("port", 8001),
        workers=config.get("workers", 1)
    )
