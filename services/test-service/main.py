"""
Simple Test Service for Agent Validation

This microservice is part of the Course Creator platform.
Generated by Software Engineer Agent on 2025-06-24 10:15:54
"""

import logging
from contextlib import asynccontextmanager
from typing import Dict, Any

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
import uvicorn

from shared.utils.config_manager import config_manager
from shared.utils.logging import setup_logging
from routers import hello_router
from dependencies import get_database, get_redis
from middleware.logging_middleware import LoggingMiddleware

# Setup logging
logger = setup_logging()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management"""
    logger.info(f"Starting test-service service on port 8999")
    yield
    logger.info(f"Shutting down test-service service")

# Create FastAPI application
app = FastAPI(
    title="Simple Test Service for Agent Validation",
    description="Simple Test Service for Agent Validation for the Course Creator platform",
    version="1.0.0",
    lifespan=lifespan
)

# Get service configuration
config = config_manager.get_service_config("test_service")

# Add middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=config.get("cors_origins", ["*"]),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=config.get("allowed_hosts", ["*"])
)

# Add custom middleware
app.add_middleware(LoggingMiddleware)

# Include routers
app.include_router(hello_router, prefix="", tags=["hello"])

@app.get("/health")
async def health_check() -> Dict[str, Any]:
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "test-service",
        "version": "1.0.0",
        "timestamp": "2025-06-24T10:15:54.059432"
    }

@app.get("/")
async def root() -> Dict[str, str]:
    """Root endpoint"""
    return {
        "message": "Simple Test Service for Agent Validation",
        "service": "test-service",
        "version": "1.0.0"
    }

if __name__ == "__main__":
    uvicorn.run(
        app,
        host=config.get("host", "0.0.0.0"),
        port=config.get("port", 8999),
        workers=config.get("workers", 1)
    )
