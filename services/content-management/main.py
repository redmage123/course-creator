"""
Service for managing course content including files, videos, documents, and media processing

This microservice is part of the Course Creator platform.
Generated by Software Engineer Agent on 2025-06-26 09:21:04
"""

import logging
from contextlib import asynccontextmanager
from typing import Dict, Any

from fastapi import FastAPI, HTTPException, Depends
from starlette.middleware.cors import CORSMiddleware
from starlette.middleware.trustedhost import TrustedHostMiddleware
import uvicorn

from ...shared.utils.config_manager import config_manager
from ...shared.utils.logging import setup_logging
from .routers import upload_content_router, get_content_router, update_content_router, delete_content_router, list_content_router, get_content_by_lesson_router, attach_to_lesson_router, process_video_router, get_processing_status_router
from .dependencies import get_database, get_redis
from .middleware import logging_middleware, cors_middleware, authentication_middleware, file_upload_middleware

# Setup logging
logger = setup_logging()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management"""
    logger.info(f"Starting content-management service on port 8003")
    yield
    logger.info(f"Shutting down content-management service")

# Create FastAPI application
app = FastAPI(
    title="Service for managing course content including files, videos, documents, and media processing",
    description="Service for managing course content including files, videos, documents, and media processing for the Course Creator platform",
    version="1.0.0",
    lifespan=lifespan
)

# Get service configuration
config = config_manager.get_service_config("content_management")

# Add middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=config.get("cors_origins", ["*"]),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=config.get("allowed_hosts", ["*"])
)

# Add custom middleware
app.add_middleware(logging_middleware)
app.add_middleware(cors_middleware)
app.add_middleware(authentication_middleware)
app.add_middleware(file_upload_middleware)

# Include routers
app.include_router(upload_content_router, prefix="/upload_content", tags=["upload_content"])
app.include_router(get_content_router, prefix="/get_content", tags=["get_content"])
app.include_router(update_content_router, prefix="/update_content", tags=["update_content"])
app.include_router(delete_content_router, prefix="/delete_content", tags=["delete_content"])
app.include_router(list_content_router, prefix="/list_content", tags=["list_content"])
app.include_router(get_content_by_lesson_router, prefix="/get_content_by_lesson", tags=["get_content_by_lesson"])
app.include_router(attach_to_lesson_router, prefix="/attach_to_lesson", tags=["attach_to_lesson"])
app.include_router(process_video_router, prefix="/process_video", tags=["process_video"])
app.include_router(get_processing_status_router, prefix="/get_processing_status", tags=["get_processing_status"])

@app.get("/health")
async def health_check() -> Dict[str, Any]:
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "content-management",
        "version": "1.0.0",
        "timestamp": "2025-06-26T09:21:04.949268"
    }

@app.get("/")
async def root() -> Dict[str, str]:
    """Root endpoint"""
    return {
        "message": "Service for managing course content including files, videos, documents, and media processing",
        "service": "content-management",
        "version": "1.0.0"
    }

if __name__ == "__main__":
    uvicorn.run(
        app,
        host=config.get("host", "0.0.0.0"),
        port=config.get("port", 8003),
        workers=config.get("workers", 1)
    )
