{
  "name": "user-service",
  "description": "User Registration, Authentication, and Profile Management Service with Role-Based Access Control",
  "port": 8000,
  "database": "users_db",
  "provides": [
    "user_management",
    "authentication", 
    "user_profiles",
    "role_management",
    "user_verification",
    "password_management",
    "user_analytics"
  ],
  "depends_on": [],
  "endpoints": [
    {
      "name": "auth",
      "routes": [
        {
          "method": "POST",
          "path": "/auth/register",
          "function_name": "register_user",
          "description": "Register a new user with email verification",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "user_data", "type": "UserRegistration"}
        },
        {
          "method": "POST",
          "path": "/auth/login",
          "function_name": "login_user",
          "description": "Authenticate user and return JWT tokens",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "credentials", "type": "LoginCredentials"}
        },
        {
          "method": "POST",
          "path": "/auth/logout",
          "function_name": "logout_user",
          "description": "Logout user and invalidate tokens",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "token_data", "type": "TokenRevocation"}
        },
        {
          "method": "POST",
          "path": "/auth/refresh",
          "function_name": "refresh_token",
          "description": "Refresh access token using refresh token",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "refresh_data", "type": "TokenRefresh"}
        },
        {
          "method": "POST",
          "path": "/auth/forgot-password",
          "function_name": "forgot_password",
          "description": "Initiate password reset process",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "email_data", "type": "ForgotPassword"}
        },
        {
          "method": "POST",
          "path": "/auth/reset-password",
          "function_name": "reset_password",
          "description": "Reset password using reset token",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "reset_data", "type": "PasswordReset"}
        },
        {
          "method": "POST",
          "path": "/auth/change-password",
          "function_name": "change_password",
          "description": "Change password for authenticated user",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "password_data", "type": "PasswordChange"}
        },
        {
          "method": "POST",
          "path": "/auth/verify-email",
          "function_name": "verify_email",
          "description": "Verify user email with verification token",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "verification_data", "type": "EmailVerification"}
        },
        {
          "method": "POST",
          "path": "/auth/resend-verification",
          "function_name": "resend_verification",
          "description": "Resend email verification",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "email_data", "type": "ResendVerification"}
        },
        {
          "method": "GET",
          "path": "/auth/validate",
          "function_name": "validate_token",
          "description": "Validate JWT token and return user info",
          "return_type": "Dict[str, Any]",
          "query_params": [
            {"name": "token", "type": "str", "description": "JWT token to validate"}
          ]
        },
        {
          "method": "GET",
          "path": "/auth/permissions/{user_id}",
          "function_name": "get_user_permissions",
          "description": "Get user permissions and roles",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}]
        }
      ]
    },
    {
      "name": "user",
      "routes": [
        {
          "method": "GET",
          "path": "/users",
          "function_name": "list_users",
          "description": "List users with filtering and pagination",
          "return_type": "Dict[str, Any]",
          "query_params": [
            {"name": "skip", "type": "int", "default": "0"},
            {"name": "limit", "type": "int", "default": "100"},
            {"name": "role", "type": "Optional[str]", "default": "None"},
            {"name": "status", "type": "Optional[str]", "default": "None"},
            {"name": "search", "type": "Optional[str]", "default": "None"},
            {"name": "verified_only", "type": "bool", "default": "False"},
            {"name": "created_after", "type": "Optional[datetime]", "default": "None"},
            {"name": "sort_by", "type": "str", "default": "created_at"},
            {"name": "sort_order", "type": "str", "default": "desc"}
          ]
        },
        {
          "method": "POST",
          "path": "/users",
          "function_name": "create_user",
          "description": "Create a new user (admin only)",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "user_data", "type": "UserCreate"}
        },
        {
          "method": "GET",
          "path": "/users/{user_id}",
          "function_name": "get_user",
          "description": "Get user details by ID",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}]
        },
        {
          "method": "PUT",
          "path": "/users/{user_id}",
          "function_name": "update_user",
          "description": "Update user information",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}],
          "body_param": {"name": "user_data", "type": "UserUpdate"}
        },
        {
          "method": "DELETE",
          "path": "/users/{user_id}",
          "function_name": "delete_user",
          "description": "Soft delete user account",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}]
        },
        {
          "method": "GET",
          "path": "/users/{user_id}/profile",
          "function_name": "get_user_profile",
          "description": "Get detailed user profile",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}]
        },
        {
          "method": "PUT",
          "path": "/users/{user_id}/profile",
          "function_name": "update_user_profile",
          "description": "Update user profile information",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}],
          "body_param": {"name": "profile_data", "type": "UserProfileUpdate"}
        },
        {
          "method": "POST",
          "path": "/users/{user_id}/avatar",
          "function_name": "upload_avatar",
          "description": "Upload user avatar image",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}],
          "body_param": {"name": "avatar_file", "type": "UploadFile"}
        },
        {
          "method": "GET",
          "path": "/users/{user_id}/validate",
          "function_name": "validate_user",
          "description": "Validate user exists and is active",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}]
        },
        {
          "method": "GET",
          "path": "/users/email/{email}",
          "function_name": "get_user_by_email",
          "description": "Get user by email address",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "email", "type": "str"}]
        },
        {
          "method": "POST",
          "path": "/users/{user_id}/activate",
          "function_name": "activate_user",
          "description": "Activate user account",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}]
        },
        {
          "method": "POST",
          "path": "/users/{user_id}/deactivate",
          "function_name": "deactivate_user",
          "description": "Deactivate user account",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "user_id", "type": "int"}]
        },
        {
          "method": "GET",
          "path": "/users/{user_id}/activity",
          "function_name": "get_user_activity",
          "description": "Get user activity history",
          "return_type": "List[Dict[str, Any]]",
          "path_params": [{"name": "user_id", "type": "int"}],
          "query_params": [
            {"name": "skip", "type": "int", "default": "0"},
            {"name": "limit", "type": "int", "default": "50"},
            {"name": "activity_type", "type": "Optional[str]", "default": "None"}
          ]
        }
      ]
    },
    {
      "name": "role",
      "routes": [
        {
          "method": "GET",
          "path": "/roles",
          "function_name": "list_roles",
          "description": "List all available roles",
          "return_type": "List[Dict[str, Any]]"
        },
        {
          "method": "POST",
          "path": "/roles",
          "function_name": "create_role",
          "description": "Create a new role",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "role_data", "type": "RoleCreate"}
        },
        {
          "method": "GET",
          "path": "/roles/{role_id}",
          "function_name": "get_role",
          "description": "Get role details by ID",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "role_id", "type": "int"}]
        },
        {
          "method": "PUT",
          "path": "/roles/{role_id}",
          "function_name": "update_role",
          "description": "Update role information",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "role_id", "type": "int"}],
          "body_param": {"name": "role_data", "type": "RoleUpdate"}
        },
        {
          "method": "DELETE",
          "path": "/roles/{role_id}",
          "function_name": "delete_role",
          "description": "Delete a role",
          "return_type": "Dict[str, Any]",
          "path_params": [{"name": "role_id", "type": "int"}]
        },
        {
          "method": "POST",
          "path": "/users/{user_id}/roles/{role_id}",
          "function_name": "assign_role",
          "description": "Assign role to user",
          "return_type": "Dict[str, Any]",
          "path_params": [
            {"name": "user_id", "type": "int"},
            {"name": "role_id", "type": "int"}
          ]
        },
        {
          "method": "DELETE",
          "path": "/users/{user_id}/roles/{role_id}",
          "function_name": "remove_role",
          "description": "Remove role from user",
          "return_type": "Dict[str, Any]",
          "path_params": [
            {"name": "user_id", "type": "int"},
            {"name": "role_id", "type": "int"}
          ]
        },
        {
          "method": "GET",
          "path": "/users/{user_id}/roles",
          "function_name": "get_user_roles",
          "description": "Get all roles assigned to user",
          "return_type": "List[Dict[str, Any]]",
          "path_params": [{"name": "user_id", "type": "int"}]
        }
      ]
    },
    {
      "name": "admin",
      "routes": [
        {
          "method": "GET",
          "path": "/admin/stats",
          "function_name": "get_user_stats",
          "description": "Get user statistics and analytics",
          "return_type": "Dict[str, Any]",
          "query_params": [
            {"name": "period", "type": "str", "default": "30d"},
            {"name": "group_by", "type": "str", "default": "day"}
          ]
        },
        {
          "method": "GET",
          "path": "/admin/users/export",
          "function_name": "export_users",
          "description": "Export user data to CSV/Excel",
          "return_type": "StreamingResponse",
          "query_params": [
            {"name": "format", "type": "str", "default": "csv"},
            {"name": "include_deleted", "type": "bool", "default": "False"},
            {"name": "role_filter", "type": "Optional[str]", "default": "None"}
          ]
        },
        {
          "method": "POST",
          "path": "/admin/users/bulk-import",
          "function_name": "bulk_import_users",
          "description": "Bulk import users from CSV/Excel",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "import_file", "type": "UploadFile"}
        },
        {
          "method": "POST",
          "path": "/admin/users/bulk-action",
          "function_name": "bulk_user_action",
          "description": "Perform bulk actions on users",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "action_data", "type": "BulkUserAction"}
        },
        {
          "method": "GET",
          "path": "/admin/audit-logs",
          "function_name": "get_audit_logs",
          "description": "Get user action audit logs",
          "return_type": "List[Dict[str, Any]]",
          "query_params": [
            {"name": "skip", "type": "int", "default": "0"},
            {"name": "limit", "type": "int", "default": "100"},
            {"name": "user_id", "type": "Optional[int]", "default": "None"},
            {"name": "action_type", "type": "Optional[str]", "default": "None"},
            {"name": "date_from", "type": "Optional[datetime]", "default": "None"},
            {"name": "date_to", "type": "Optional[datetime]", "default": "None"}
          ]
        },
        {
          "method": "POST",
          "path": "/admin/system/cleanup",
          "function_name": "cleanup_inactive_users",
          "description": "Clean up inactive users and sessions",
          "return_type": "Dict[str, Any]",
          "body_param": {"name": "cleanup_params", "type": "CleanupParams"}
        }
      ]
    }
  ],
  "database_models": [
    {
      "name": "User",
      "description": "Core user entity with authentication and profile information",
      "fields": [
        {"name": "user_id", "type": "int", "nullable": false, "primary_key": true},
        {"name": "email", "type": "str", "nullable": false, "unique": true, "max_length": 255, "index": true},
        {"name": "username", "type": "str", "nullable": true, "unique": true, "max_length": 50, "index": true},
        {"name": "password_hash", "type": "str", "nullable": false, "max_length": 255},
        {"name": "first_name", "type": "str", "nullable": false, "max_length": 100},
        {"name": "last_name", "type": "str", "nullable": false, "max_length": 100},
        {"name": "display_name", "type": "str", "nullable": true, "max_length": 100},
        {"name": "phone_number", "type": "str", "nullable": true, "max_length": 20},
        {"name": "date_of_birth", "type": "date", "nullable": true},
        {"name": "gender", "type": "str", "nullable": true, "max_length": 20},
        {"name": "avatar_url", "type": "str", "nullable": true, "max_length": 500},
        {"name": "bio", "type": "text", "nullable": true},
        {"name": "timezone", "type": "str", "nullable": true, "max_length": 50, "default": "UTC"},
        {"name": "language", "type": "str", "nullable": false, "max_length": 10, "default": "en"},
        {"name": "is_active", "type": "bool", "nullable": false, "default": true, "index": true},
        {"name": "is_verified", "type": "bool", "nullable": false, "default": false, "index": true},
        {"name": "is_staff", "type": "bool", "nullable": false, "default": false},
        {"name": "is_superuser", "type": "bool", "nullable": false, "default": false},
        {"name": "email_verified_at", "type": "datetime", "nullable": true},
        {"name": "last_login_at", "type": "datetime", "nullable": true, "index": true},
        {"name": "last_activity_at", "type": "datetime", "nullable": true, "index": true},
        {"name": "failed_login_attempts", "type": "int", "nullable": false, "default": 0},
        {"name": "locked_until", "type": "datetime", "nullable": true},
        {"name": "password_changed_at", "type": "datetime", "nullable": true},
        {"name": "terms_accepted_at", "type": "datetime", "nullable": true},
        {"name": "privacy_accepted_at", "type": "datetime", "nullable": true},
        {"name": "marketing_emails_enabled", "type": "bool", "nullable": false, "default": true},
        {"name": "notification_preferences", "type": "json", "nullable": true},
        {"name": "metadata", "type": "json", "nullable": true},
        {"name": "created_at", "type": "datetime", "nullable": false, "index": true},
        {"name": "updated_at", "type": "datetime", "nullable": false},
        {"name": "deleted_at", "type": "datetime", "nullable": true, "index": true}
      ]
    },
    {
      "name": "Role",
      "description": "User roles and permissions system",
      "fields": [
        {"name": "role_id", "type": "int", "nullable": false, "primary_key": true},
        {"name": "name", "type": "str", "nullable": false, "unique": true, "max_length": 50},
        {"name": "display_name", "type": "str", "nullable": false, "max_length": 100},
        {"name": "description", "type": "str", "nullable": true, "max_length": 500},
        {"name": "permissions", "type": "json", "nullable": false},
        {"name": "is_system_role", "type": "bool", "nullable": false, "default": false},
        {"name": "is_active", "type": "bool", "nullable": false, "default": true},
        {"name": "hierarchy_level", "type": "int", "nullable": false, "default": 0},
        {"name": "created_at", "type": "datetime", "nullable": false},
        {"name": "updated_at", "type": "datetime", "nullable": false}
      ]
    },
    {
      "name": "UserRole",
      "description": "Many-to-many relationship between users and roles",
      "fields": [
        {"name": "user_id", "type": "int", "nullable": false, "foreign_key": "users.user_id", "primary_key": true},
        {"name": "role_id", "type": "int", "nullable": false, "foreign_key": "roles.role_id", "primary_key": true},
        {"name": "assigned_by", "type": "int", "nullable": true, "foreign_key": "users.user_id"},
        {"name": "assigned_at", "type": "datetime", "nullable": false},
        {"name": "expires_at", "type": "datetime", "nullable": true},
        {"name": "is_active", "type": "bool", "nullable": false, "default": true}
      ]
    },
    {
      "name": "UserSession",
      "description": "User authentication sessions and JWT token management",
      "fields": [
        {"name": "session_id", "type": "str", "nullable": false, "primary_key": true, "max_length": 255},
        {"name": "user_id", "type": "int", "nullable": false, "foreign_key": "users.user_id", "index": true},
        {"name": "refresh_token", "type": "str", "nullable": false, "unique": true, "max_length": 255},
        {"name": "access_token_jti", "type": "str", "nullable": false, "max_length": 255, "index": true},
        {"name": "device_info", "type": "json", "nullable": true},
        {"name": "ip_address", "type": "str", "nullable": true, "max_length": 45},
        {"name": "user_agent", "type": "str", "nullable": true, "max_length": 500},
        {"name": "location", "type": "str", "nullable": true, "max_length": 100},
        {"name": "is_active", "type": "bool", "nullable": false, "default": true},
        {"name": "expires_at", "type": "datetime", "nullable": false, "index": true},
        {"name": "last_used_at", "type": "datetime", "nullable": false},
        {"name": "created_at", "type": "datetime", "nullable": false}
      ]
    },
    {
      "name": "UserVerification",
      "description": "Email verification and password reset tokens",
      "fields": [
        {"name": "verification_id", "type": "int", "nullable": false, "primary_key": true},
        {"name": "user_id", "type": "int", "nullable": false, "foreign_key": "users.user_id", "index": true},
        {"name": "token", "type": "str", "nullable": false, "unique": true, "max_length": 255, "index": true},
        {"name": "token_type", "type": "str", "nullable": false, "choices": ["email_verification", "password_reset", "phone_verification"], "index": true},
        {"name": "email", "type": "str", "nullable": true, "max_length": 255},
        {"name": "phone_number", "type": "str", "nullable": true, "max_length": 20},
        {"name": "is_used", "type": "bool", "nullable": false, "default": false},
        {"name": "attempts", "type": "int", "nullable": false, "default": 0},
        {"name": "expires_at", "type": "datetime", "nullable": false, "index": true},
        {"name": "used_at", "type": "datetime", "nullable": true},
        {"name": "created_at", "type": "datetime", "nullable": false}
      ]
    },
    {
      "name": "UserProfile",
      "description": "Extended user profile information",
      "fields": [
        {"name": "user_id", "type": "int", "nullable": false, "foreign_key": "users.user_id", "primary_key": true},
        {"name": "title", "type": "str", "nullable": true, "max_length": 100},
        {"name": "company", "type": "str", "nullable": true, "max_length": 200},
        {"name": "job_title", "type": "str", "nullable": true, "max_length": 200},
        {"name": "website", "type": "str", "nullable": true, "max_length": 500},
        {"name": "linkedin_url", "type": "str", "nullable": true, "max_length": 500},
        {"name": "twitter_url", "type": "str", "nullable": true, "max_length": 500},
        {"name": "github_url", "type": "str", "nullable": true, "max_length": 500},
        {"name": "skills", "type": "json", "nullable": true},
        {"name": "interests", "type": "json", "nullable": true},
        {"name": "education", "type": "json", "nullable": true},
        {"name": "experience_level", "type": "str", "nullable": true, "choices": ["beginner", "intermediate", "advanced", "expert"]},
        {"name": "learning_goals", "type": "text", "nullable": true},
        {"name": "address_line1", "type": "str", "nullable": true, "max_length": 200},
        {"name": "address_line2", "type": "str", "nullable": true, "max_length": 200},
        {"name": "city", "type": "str", "nullable": true, "max_length": 100},
        {"name": "state", "type": "str", "nullable": true, "max_length": 100},
        {"name": "postal_code", "type": "str", "nullable": true, "max_length": 20},
        {"name": "country", "type": "str", "nullable": true, "max_length": 100},
        {"name": "profile_completion_percentage", "type": "int", "nullable": false, "default": 0},
        {"name": "public_profile", "type": "bool", "nullable": false, "default": false},
        {"name": "created_at", "type": "datetime", "nullable": false},
        {"name": "updated_at", "type": "datetime", "nullable": false}
      ]
    },
    {
      "name": "UserActivity",
      "description": "User activity and audit log",
      "fields": [
        {"name": "activity_id", "type": "int", "nullable": false, "primary_key": true},
        {"name": "user_id", "type": "int", "nullable": false, "foreign_key": "users.user_id", "index": true},
        {"name": "activity_type", "type": "str", "nullable": false, "choices": ["login", "logout", "profile_update", "password_change", "role_change", "account_lock", "account_unlock"], "index": true},
        {"name": "description", "type": "str", "nullable": false, "max_length": 500},
        {"name": "ip_address", "type": "str", "nullable": true, "max_length": 45},
        {"name": "user_agent", "type": "str", "nullable": true, "max_length": 500},
        {"name": "metadata", "type": "json", "nullable": true},
        {"name": "created_at", "type": "datetime", "nullable": false, "index": true}
      ]
    },
    {
      "name": "LoginAttempt",
      "description": "Failed login attempts for security monitoring",
      "fields": [
        {"name": "attempt_id", "type": "int", "nullable": false, "primary_key": true},
        {"name": "email", "type": "str", "nullable": false, "max_length": 255, "index": true},
        {"name": "ip_address", "type": "str", "nullable": false, "max_length": 45, "index": true},
        {"name": "user_agent", "type": "str", "nullable": true, "max_length": 500},
        {"name": "success", "type": "bool", "nullable": false, "default": false, "index": true},
        {"name": "failure_reason", "type": "str", "nullable": true, "max_length": 200},
        {"name": "user_id", "type": "int", "nullable": true, "foreign_key": "users.user_id"},
        {"name": "created_at", "type": "datetime", "nullable": false, "index": true}
      ]
    }
  ],
  "business_logic": {
    "description": "Comprehensive user management system with authentication, authorization, and profile management capabilities",
    "key_features": [
      "User registration with email verification workflow",
      "JWT-based authentication with refresh token rotation",
      "Role-based access control (RBAC) with hierarchical permissions",
      "Password security with hashing, complexity requirements, and reset functionality",
      "Account security with failed login tracking and account locking",
      "User profile management with extended information and privacy controls",
      "Session management with device tracking and concurrent session limits",
      "User activity auditing and security monitoring",
      "Bulk user operations for administrative management",
      "Data export and import capabilities for compliance",
      "Multi-factor authentication support (future extension)",
      "Social login integration capabilities (OAuth2)",
      "User analytics and reporting dashboard",
      "GDPR compliance with data deletion and export",
      "Account deactivation and soft delete functionality"
    ],
    "security_features": [
      "Password hashing using bcrypt with configurable rounds",
      "JWT tokens with short expiration and refresh rotation",
      "Rate limiting on authentication endpoints",
      "Account lockout after failed login attempts",
      "Email verification required for account activation",
      "Password complexity requirements and history",
      "Session invalidation on security events",
      "IP-based login anomaly detection",
      "User agent and device fingerprinting",
      "Audit logging of all security-related activities"
    ],
    "validation_rules": [
      "Email must be valid format and unique across system",
      "Password must meet complexity requirements (length, characters)",
      "Username must be unique and follow naming conventions",
      "Phone numbers must be valid format if provided",
      "Profile completion percentage auto-calculated based on filled fields",
      "Role assignments must respect hierarchy levels",
      "Session tokens must be valid and not expired",
      "Verification tokens expire after configurable time period",
      "Failed login attempts reset after successful login",
      "User metadata must be valid JSON format"
    ],
    "workflows": [
      {
        "name": "user_registration_workflow",
        "steps": [
          "Validate registration data and check for existing users",
          "Hash password using secure algorithm",
          "Create user account in pending/unverified state",
          "Generate email verification token",
          "Send verification email with secure link",
          "Log registration activity and send welcome notification",
          "Create default user profile with basic information",
          "Assign default roles based on registration type"
        ]
      },
      {
        "name": "email_verification_workflow",
        "steps": [
          "Receive verification token from email link",
          "Validate token exists and is not expired",
          "Check token hasn't been used previously",
          "Mark user email as verified and activate account",
          "Log verification activity and update user status",
          "Send confirmation email and emit user verification event",
          "Trigger onboarding sequence for verified users"
        ]
      },
      {
        "name": "authentication_workflow",
        "steps": [
          "Validate credentials format and rate limits",
          "Check user exists and account is active",
          "Verify password hash and account lock status",
          "Generate JWT access and refresh tokens",
          "Create user session with device tracking",
          "Log successful login and update last activity",
          "Return tokens with user information and permissions",
          "Update login statistics and security metrics"
        ]
      },
      {
        "name": "password_reset_workflow",
        "steps": [
          "Validate email exists in system",
          "Generate secure password reset token",
          "Send reset email with time-limited link",
          "Log password reset request for security",
          "Validate reset token when user submits new password",
          "Update password hash and invalidate all sessions",
          "Log password change and notify user of change",
          "Optionally require re-verification of email"
        ]
      }
    ],
    "integration_points": [
      "Event publishing for user lifecycle events to dependent services",
      "Email service integration for verification and notification emails",
      "File storage service for avatar and profile image management",
      "Analytics service for user behavior tracking and reporting",
      "Notification service for real-time user alerts and updates",
      "Audit service for comprehensive security and compliance logging",
      "External identity providers for social login (OAuth2/OIDC)",
      "Payment service integration for subscription and billing user data"
    ]
  },
  "produces_events": [
    "user.created",
    "user.updated",
    "user.deleted",
    "user.activated",
    "user.deactivated",
    "user.verified",
    "user.login",
    "user.logout",
    "user.password_changed",
    "user.profile_updated",
    "user.role_assigned",
    "user.role_removed",
    "user.locked",
    "user.unlocked",
    "user.session_created",
    "user.session_expired"
  ],
  "consumes_events": [
    "system.maintenance_mode",
    "security.threat_detected",
    "payment.subscription_updated",
    "notification.delivery_failed"
  ],
  "authentication": true,
  "caching": true,
  "logging": true,
  "dependencies": [
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1",
    "pillow>=10.1.0",
    "email-validator>=2.1.0",
    "pydantic[email]>=2.5.0",
    "python-magic>=0.4.27",
    "phonenumbers>=8.13.26",
    "pycountry>=22.3.13",
    "user-agents>=2.2.0",
    "maxminddb>=2.2.0",
    "celery>=5.3.4",
    "redis>=5.0.1",
    "openpyxl>=3.1.2",
    "pandas>=2.1.4"
  ],
  "async_tasks": [
    {
      "name": "send_verification_email",
      "description": "Send email verification link to new users",
      "triggers": ["user_registered"],
      "priority": "high",
      "retry_attempts": 3,
      "timeout": 300
    },
    {
      "name": "send_password_reset_email", 
      "description": "Send password reset link via email",
      "triggers": ["password_reset_requested"],
      "priority": "high",
      "retry_attempts": 3,
      "timeout": 300
    },
    {
      "name": "cleanup_expired_tokens",
      "description": "Clean up expired verification and session tokens",
      "schedule": "hourly",
      "priority": "low",
      "retry_attempts": 1
    },
    {
      "name": "generate_user_analytics",
      "description": "Generate user activity and engagement analytics",
      "schedule": "daily",
      "priority": "low",
      "retry_attempts": 2
    },
    {
      "name": "process_avatar_upload",
      "description": "Process and resize uploaded avatar images",
      "triggers": ["avatar_uploaded"],
      "priority": "medium",
      "retry_attempts": 2,
      "timeout": 600
    },
    {
      "name": "sync_user_permissions",
      "description": "Synchronize user permissions across services",
      "triggers": ["role_changed"],
      "priority": "high",
      "retry_attempts": 3
    },
    {
      "name": "audit_security_events",
      "description": "Process and analyze security-related events",
      "triggers": ["security_event"],
      "priority": "high",
      "retry_attempts": 2
    },
    {
      "name": "backup_user_data",
      "description": "Backup user data for compliance and disaster recovery",
      "schedule": "daily",
      "priority": "medium",
      "retry_attempts": 1
    }
  ],
  "websocket_endpoints": [
    {
      "name": "user_notifications",
      "path": "/ws/users/{user_id}/notifications",
      "description": "Real-time notifications and updates for users"
    },
    {
      "name": "admin_dashboard",
      "path": "/ws/admin/dashboard",
      "description": "Real-time admin dashboard with user statistics and alerts"
    },
    {
      "name": "security_monitoring",
      "path": "/ws/admin/security",
      "description": "Real-time security event monitoring and alerts"
    }
  ],
  "middleware": [
    "logging",
    "timing",
    "security",
    "auth",
    "rate_limiting",
    "cors",
    "csrf_protection",
    "correlation_id",
    "distributed_tracing",
    "request_validation",
    "response_compression",
    "security_headers",
    "audit_logging"
  ]
}
