name: Full Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  DATABASE_URL: postgresql://test_user:test_password@localhost:5432/course_creator_test
  REDIS_URL: redis://localhost:6379/1
  JWT_SECRET: test_secret_key_for_testing_only
  STORAGE_PATH: /tmp/test_storage
  LOG_LEVEL: INFO
  PYTHONPATH: .

jobs:
  # Backend Unit Tests
  backend-unit-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: course_creator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Setup database schema
      run: |
        python setup-database-ci.py
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run backend unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=services --cov-report=xml --cov-report=term
      continue-on-error: false

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: backend-unit
        name: backend-coverage

  # Frontend Unit Tests
  frontend-unit-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Jest unit tests
      run: npm run test:unit
      continue-on-error: false

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: frontend-unit
        name: frontend-coverage

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-unit-tests]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: course_creator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Setup database
      run: python setup-database-ci.py

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short
      continue-on-error: false

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit

    - name: Run Bandit security scan
      run: |
        bandit -r services/ -ll -f json -o bandit-report.json
      continue-on-error: false

    - name: Run pip-audit for vulnerable dependencies
      run: |
        pip-audit --desc
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: bandit-report.json

  # Linting and Code Quality
  lint-and-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
        pip install black isort flake8 pylint

    - name: Run ESLint
      run: npm run lint
      continue-on-error: false

    - name: Run Black formatting check
      run: black --check services/
      continue-on-error: false

    - name: Run isort import check
      run: isort --check-only services/
      continue-on-error: false

    - name: Run flake8
      run: flake8 services/ --max-line-length=120 --exclude=__pycache__,.venv
      continue-on-error: true

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: course_creator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio selenium

    - name: Run Playwright E2E tests
      run: npm run test:e2e
      continue-on-error: false

    - name: Upload Playwright test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        path: playwright-report/

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: course_creator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Setup database
      run: python setup-database-ci.py

    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ -v --benchmark-only
      continue-on-error: true

  # Test Summary
  test-summary:
    needs: [frontend-unit-tests, backend-unit-tests, integration-tests, security-tests, lint-and-quality, e2e-tests, performance-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Generate Test Summary
      run: |
        echo "# 🧪 Full Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Unit Tests | ${{ needs.frontend-unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Unit Tests | ${{ needs.backend-unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint & Quality | ${{ needs.lint-and-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.frontend-unit-tests.result }}" == "success" ] && \
           [ "${{ needs.backend-unit-tests.result }}" == "success" ] && \
           [ "${{ needs.integration-tests.result }}" == "success" ] && \
           [ "${{ needs.security-tests.result }}" == "success" ] && \
           [ "${{ needs.lint-and-quality.result }}" == "success" ] && \
           [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "## ✅ All Critical Tests Passed!" >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "## ❌ Some Tests Failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
