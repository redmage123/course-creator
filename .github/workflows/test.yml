name: Test Suite (Fixed)

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/course_creator_test
  TEST_REDIS_URL: redis://localhost:6379/1
  TEST_JWT_SECRET: test_secret_key_for_testing
  TEST_STORAGE_PATH: /tmp/test_storage
  TEST_LOG_LEVEL: INFO

jobs:
  # Backend Unit Tests (Using New Framework)
  backend-unit-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: course_creator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
    
    - name: Setup database
      run: |
        python setup-database.py
      env:
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
    
    - name: Run backend unit tests
      run: |
        python tests/main_test_runner.py --type unit --coverage --ci
      env:
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        REDIS_URL: ${{ env.TEST_REDIS_URL }}
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.json
        flags: backend
        name: backend-coverage

  # Frontend Unit Tests (Using New Framework)  
  frontend-unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python (for frontend tests)
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run frontend tests
      run: |
        python tests/main_test_runner.py --type frontend --coverage --ci
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.json
        flags: frontend
        name: frontend-coverage

  # Integration Tests (Using New Framework)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-unit-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: course_creator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Setup database
      run: |
        python setup-database.py
      env:
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
    
    - name: Start services with Docker Compose (for integration tests)
      run: |
        docker-compose up -d --build
        sleep 30  # Wait for services to be ready
    
    - name: Run integration tests
      run: |
        python tests/main_test_runner.py --type integration --coverage --ci
      env:
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        REDIS_URL: ${{ env.TEST_REDIS_URL }}
    
    - name: Stop services
      run: docker-compose down

  # E2E Tests (Using New Framework)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: course_creator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Install Playwright
      run: npx playwright install
    
    - name: Setup database
      run: |
        python setup-database.py
      env:
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
    
    - name: Start full platform
      run: |
        docker-compose up -d --build
        sleep 60  # Wait longer for full platform startup
    
    - name: Run E2E tests
      run: |
        python tests/main_test_runner.py --type e2e --ci
      env:
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        REDIS_URL: ${{ env.TEST_REDIS_URL }}
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: tests/reports/
        retention-days: 30
    
    - name: Stop platform
      run: docker-compose down

  # Security Tests (Using New Framework)
  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio bandit safety
    
    - name: Run security tests
      run: |
        python tests/main_test_runner.py --type security --ci
      continue-on-error: true
    
    - name: Run Bandit security scan
      run: bandit -r services/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety check
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          tests/reports/
        retention-days: 30

  # Linting and Code Quality
  lint-and-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
        pip install black isort flake8
    
    - name: Run JavaScript linting
      run: npm run lint
    
    - name: Run Python formatting check
      run: |
        black --check services/
        isort --check-only services/
        flake8 services/
      continue-on-error: true

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [backend-unit-tests, integration-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: course_creator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Setup database
      run: |
        python setup-database.py
      env:
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
    
    - name: Start platform
      run: |
        docker-compose up -d --build
        sleep 60
    
    - name: Run performance tests
      run: |
        python tests/main_test_runner.py --type performance --ci
      continue-on-error: true
    
    - name: Stop platform
      run: docker-compose down

  # Test results summary
  test-summary:
    needs: [frontend-unit-tests, backend-unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Unit Tests: ${{ needs.frontend-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Unit Tests: ${{ needs.backend-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY

  # Deploy to staging (if all tests pass)
  deploy-staging:
    needs: [frontend-unit-tests, backend-unit-tests, integration-tests, e2e-tests, lint-and-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        echo "Deployment completed successfully"

  # Deploy to production (if all tests pass on main)
  deploy-production:
    needs: [frontend-unit-tests, backend-unit-tests, integration-tests, e2e-tests, lint-and-quality, performance-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment commands here
        echo "Production deployment completed successfully"