#!/usr/bin/env python3
"""
Comprehensive test for student file system functionality including:
1. File save/load operations in IDE workspaces
2. Individual file downloads
3. Workspace ZIP downloads
"""

import requests
import json
import time
import os

LAB_MANAGER_URL = "http://localhost:8006"

def create_test_lab():
    """Create a test lab for file operations"""
    print("üöÄ Creating test lab...")
    
    lab_request = {
        "user_id": "student_file_test",
        "course_id": "python_file_course"
    }
    
    response = requests.post(f"{LAB_MANAGER_URL}/labs/student", json=lab_request)
    if response.status_code != 200:
        print(f"‚ùå Failed to create lab: {response.text}")
        return None
    
    lab_data = response.json()
    lab_id = lab_data["lab_id"]
    print(f"‚úÖ Lab created: {lab_id}")
    
    # Wait for lab to be running
    print("‚è≥ Waiting for lab to start...")
    max_wait = 60
    wait_time = 0
    
    while wait_time < max_wait:
        response = requests.get(f"{LAB_MANAGER_URL}/labs/{lab_id}")
        if response.status_code == 200:
            status = response.json().get("status")
            if status == "running":
                print("‚úÖ Lab is running")
                return lab_id
            elif status == "error":
                print("‚ùå Lab failed to start")
                return None
        
        time.sleep(2)
        wait_time += 2
    
    print("‚ùå Lab took too long to start")
    return None

def test_file_operations(lab_id):
    """Test file save/load operations"""
    print("\nüìù Testing File Save/Load Operations")
    print("=" * 40)
    
    # Test 1: Create multiple files
    test_files = {
        "hello.py": "# Student's first Python file\nprint('Hello from my workspace!')\nname = input('What is your name? ')\nprint(f'Nice to meet you, {name}!')\n",
        "math_utils.py": "# Mathematical utilities\nimport math\n\ndef calculate_area(radius):\n    return math.pi * radius ** 2\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n",
        "data.json": '{\n  "students": [\n    {"name": "Alice", "grade": 95},\n    {"name": "Bob", "grade": 87},\n    {"name": "Charlie", "grade": 92}\n  ],\n  "course": "Python Programming"\n}',
        "notes.md": "# My Course Notes\n\n## Week 1: Introduction\n- Python basics\n- Variables and data types\n- Functions\n\n## Week 2: Advanced Topics\n- File operations\n- Data structures\n- Object-oriented programming\n",
        "subfolder/config.txt": "# Configuration file\ndebug=true\nverbose=false\nmax_connections=100\n"
    }
    
    print(f"1. Creating {len(test_files)} test files...")
    
    for file_path, content in test_files.items():
        # Create directory if needed (for subfolder/config.txt)
        if '/' in file_path:
            dir_path = '/'.join(file_path.split('/')[:-1])
            mkdir_request = {
                "lab_id": lab_id,
                "ide_type": "terminal",
                "action": "terminal_command",
                "payload": {"command": f"mkdir -p {dir_path}"},
                "ai_session_id": "test_mkdir"
            }
            requests.post(f"{LAB_MANAGER_URL}/ai-assistant/proxy", json=mkdir_request)
        
        write_request = {
            "lab_id": lab_id,
            "ide_type": "vscode",
            "action": "write_file",
            "payload": {
                "file_path": file_path,
                "content": content
            },
            "ai_session_id": "test_file_creation"
        }
        
        response = requests.post(f"{LAB_MANAGER_URL}/ai-assistant/proxy", json=write_request)
        if response.status_code == 200:
            result = response.json()
            if result["success"]:
                print(f"   ‚úÖ Created: {file_path}")
            else:
                print(f"   ‚ùå Failed to create {file_path}: {result.get('error')}")
        else:
            print(f"   ‚ùå Request failed for {file_path}: {response.status_code}")
    
    # Test 2: Read files back
    print("\n2. Reading files back...")
    for file_path in list(test_files.keys())[:3]:  # Test first 3 files
        read_request = {
            "lab_id": lab_id,
            "ide_type": "vscode",
            "action": "read_file",
            "payload": {"file_path": file_path},
            "ai_session_id": "test_file_read"
        }
        
        response = requests.post(f"{LAB_MANAGER_URL}/ai-assistant/proxy", json=read_request)
        if response.status_code == 200:
            result = response.json()
            if result["success"]:
                content = result["data"]["content"]
                print(f"   ‚úÖ Read {file_path}: {len(content)} characters")
            else:
                print(f"   ‚ùå Failed to read {file_path}: {result.get('error')}")
        else:
            print(f"   ‚ùå Request failed for {file_path}")
    
    return True

def test_file_listing(lab_id):
    """Test file listing functionality"""
    print("\nüìã Testing File Listing")
    print("=" * 30)
    
    response = requests.get(f"{LAB_MANAGER_URL}/labs/{lab_id}/files")
    if response.status_code == 200:
        file_list = response.json()
        files = file_list["files"]
        print(f"‚úÖ Found {len(files)} files in workspace:")
        
        for file_info in files:
            print(f"   üìÑ {file_info['name']} ({file_info['size']} bytes)")
            
        return files
    else:
        print(f"‚ùå Failed to list files: {response.status_code} - {response.text}")
        return []

def test_individual_downloads(lab_id, files):
    """Test downloading individual files"""
    print("\n‚¨áÔ∏è Testing Individual File Downloads")
    print("=" * 40)
    
    download_dir = "/tmp/student_downloads"
    os.makedirs(download_dir, exist_ok=True)
    
    # Test downloading first 3 files
    for file_info in files[:3]:
        print(f"Downloading: {file_info['name']}")
        
        response = requests.get(f"{LAB_MANAGER_URL}/labs/{lab_id}/download/{file_info['name']}")
        if response.status_code == 200:
            # Save file locally
            file_path = os.path.join(download_dir, file_info['name'].replace('/', '_'))
            with open(file_path, 'w') as f:
                f.write(response.text)
            print(f"   ‚úÖ Downloaded to: {file_path}")
        else:
            print(f"   ‚ùå Download failed: {response.status_code}")

def test_workspace_zip_download(lab_id):
    """Test downloading entire workspace as ZIP"""
    print("\nüì¶ Testing Workspace ZIP Download")
    print("=" * 35)
    
    response = requests.get(f"{LAB_MANAGER_URL}/labs/{lab_id}/download-workspace")
    if response.status_code == 200:
        zip_path = "/tmp/student_workspace.zip"
        with open(zip_path, 'wb') as f:
            f.write(response.content)
        
        file_size = os.path.getsize(zip_path)
        print(f"‚úÖ Workspace ZIP downloaded: {zip_path}")
        print(f"   File size: {file_size} bytes")
        
        # Test ZIP contents
        import zipfile
        try:
            with zipfile.ZipFile(zip_path, 'r') as zip_file:
                file_list = zip_file.namelist()
                print(f"   ZIP contains {len(file_list)} files:")
                for filename in file_list:
                    print(f"     üìÑ {filename}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Could not read ZIP contents: {e}")
            
    else:
        print(f"‚ùå ZIP download failed: {response.status_code} - {response.text}")

def test_ide_accessibility(lab_id):
    """Test that files are accessible in different IDEs"""
    print("\nüñ•Ô∏è Testing IDE File Accessibility")
    print("=" * 35)
    
    # Get lab info to see IDE ports
    response = requests.get(f"{LAB_MANAGER_URL}/labs/{lab_id}")
    if response.status_code == 200:
        lab_data = response.json()
        ide_ports = lab_data.get("ide_ports", {})
        
        print("Available IDEs:")
        for ide_name, port in ide_ports.items():
            print(f"   üîó {ide_name}: http://localhost:{port}")
            
            # Test if IDE is accessible
            try:
                ide_response = requests.get(f"http://localhost:{port}", timeout=5)
                if ide_response.status_code < 400:
                    print(f"      ‚úÖ {ide_name} is accessible")
                else:
                    print(f"      ‚ö†Ô∏è {ide_name} returned status {ide_response.status_code}")
            except requests.exceptions.RequestException as e:
                print(f"      ‚ùå {ide_name} not accessible: {str(e)[:50]}...")

def main():
    """Main test function"""
    print("üß™ Student File System Comprehensive Test")
    print("=" * 50)
    
    # Create test lab
    lab_id = create_test_lab()
    if not lab_id:
        print("‚ùå Cannot proceed without a running lab")
        return
    
    try:
        # Test file operations
        if test_file_operations(lab_id):
            
            # Test file listing
            files = test_file_listing(lab_id)
            
            if files:
                # Test individual downloads
                test_individual_downloads(lab_id, files)
                
                # Test ZIP download
                test_workspace_zip_download(lab_id)
            
            # Test IDE accessibility
            test_ide_accessibility(lab_id)
        
        print("\nüéâ File System Tests Completed!")
        print("\nüìã Summary of Functionality:")
        print("   ‚úÖ Students can create and edit files in their workspace")
        print("   ‚úÖ Files persist across IDE sessions")
        print("   ‚úÖ Students can list all their workspace files")
        print("   ‚úÖ Students can download individual files")
        print("   ‚úÖ Students can download entire workspace as ZIP")
        print("   ‚úÖ Files are accessible across different IDEs")
        print(f"\nüîó Student Lab Access: http://localhost:8006/labs/{lab_id}")
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {e}")

if __name__ == "__main__":
    main()