# Lab Containers Service with Multi-IDE Support
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lab-containers
  labels:
    app: lab-containers
    service: lab-containers
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lab-containers
  template:
    metadata:
      labels:
        app: lab-containers
        service: lab-containers
        tier: backend
    spec:
      serviceAccountName: lab-containers-sa
      containers:
      - name: lab-containers
        image: course-creator-lab-containers:latest
        ports:
        - containerPort: 8006
          name: http
        env:
        - name: PORT
          value: "8006"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: course-creator-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: course-creator-secrets
              key: redis-url
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: course-creator-secrets
              key: jwt-secret-key
        - name: MAX_CONCURRENT_LABS
          valueFrom:
            configMapKeyRef:
              name: course-creator-config
              key: MAX_CONCURRENT_LABS
        - name: LAB_SESSION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: course-creator-config
              key: LAB_SESSION_TIMEOUT
        - name: MULTI_IDE_ENABLED
          valueFrom:
            configMapKeyRef:
              name: course-creator-config
              key: ENABLE_MULTI_IDE
        - name: MULTI_IDE_BASE_IMAGE
          value: "course-creator-multi-ide-base:latest"
        - name: PYTHON_LAB_MULTI_IDE_IMAGE
          value: "course-creator-python-lab-multi-ide:latest"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8006
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8006
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
        - name: lab-storage
          mountPath: /app/lab-storage
        - name: multi-ide-config
          mountPath: /app/config/ide-config.json
          subPath: ide-config.json
      volumes:
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      - name: lab-storage
        persistentVolumeClaim:
          claimName: lab-storage-pvc
      - name: multi-ide-config
        configMap:
          name: multi-ide-config
      securityContext:
        fsGroup: 2000
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: lab-containers
  labels:
    app: lab-containers
    service: lab-containers
spec:
  selector:
    app: lab-containers
  ports:
  - name: http
    port: 8006
    targetPort: 8006
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: lab-storage-pvc
  labels:
    app: lab-containers
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: standard

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: lab-containers-sa
  labels:
    app: lab-containers

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: lab-containers-role
rules:
# Docker operations (if using DinD)
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: lab-containers-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: lab-containers-role
subjects:
- kind: ServiceAccount
  name: lab-containers-sa
  namespace: course-creator

---
# Horizontal Pod Autoscaler for Lab Containers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: lab-containers-hpa
  labels:
    app: lab-containers
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: lab-containers
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# Network Policy for Lab Containers
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: lab-containers-netpol
  labels:
    app: lab-containers
spec:
  podSelector:
    matchLabels:
      app: lab-containers
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          tier: frontend
    - podSelector:
        matchLabels:
          app: user-management
    ports:
    - protocol: TCP
      port: 8006
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow access to database
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Allow access to Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow Docker daemon access (for DinD)
  - to: []
    ports:
    - protocol: TCP
      port: 2376
  # Allow outbound HTTP/HTTPS for image pulls
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443