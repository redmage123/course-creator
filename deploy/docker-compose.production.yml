# Course Creator Platform - Production Docker Compose
# Production deployment with security hardening and performance optimization

version: '3.8'

networks:
  course-creator-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  ssl_certs:
    driver: local

services:
  # ==========================================================================
  # DATABASE SERVICES
  # ==========================================================================
  
  postgres:
    image: postgres:14-alpine
    container_name: course-creator-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-course_creator}
      POSTGRES_USER: ${DB_USER:-course_creator}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    networks:
      - course-creator-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-course_creator}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  redis:
    image: redis:7-alpine
    container_name: course-creator-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    networks:
      - course-creator-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # ==========================================================================
  # APPLICATION SERVICES
  # ==========================================================================

  user-management:
    build:
      context: .
      dockerfile: services/user-management/Dockerfile.production
    container_name: course-creator-user-management
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - .env.production
    volumes:
      - logs_data:/var/log/course-creator
      - uploads_data:/app/uploads:ro
    ports:
      - "127.0.0.1:8000:8000"
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  course-generator:
    build:
      context: .
      dockerfile: services/course-generator/Dockerfile.production
    container_name: course-creator-course-generator
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - .env.production
    volumes:
      - logs_data:/var/log/course-creator
      - uploads_data:/app/uploads:ro
    ports:
      - "127.0.0.1:8001:8001"
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  content-storage:
    build:
      context: .
      dockerfile: services/content-storage/Dockerfile.production
    container_name: course-creator-content-storage
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - .env.production
    volumes:
      - logs_data:/var/log/course-creator
      - uploads_data:/app/uploads
    ports:
      - "127.0.0.1:8003:8003"
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  course-management:
    build:
      context: .
      dockerfile: services/course-management/Dockerfile.production
    container_name: course-creator-course-management
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - .env.production
    volumes:
      - logs_data:/var/log/course-creator
      - uploads_data:/app/uploads:ro
    ports:
      - "127.0.0.1:8004:8004"
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  content-management:
    build:
      context: .
      dockerfile: services/content-management/Dockerfile.production
    container_name: course-creator-content-management
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - .env.production
    volumes:
      - logs_data:/var/log/course-creator
      - uploads_data:/app/uploads
    ports:
      - "127.0.0.1:8005:8005"
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  lab-manager:
    build:
      context: .
      dockerfile: services/lab-manager/Dockerfile.production
    container_name: course-creator-lab-manager
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - .env.production
    volumes:
      - logs_data:/var/log/course-creator
      - /var/run/docker.sock:/var/run/docker.sock  # Docker-in-Docker
      - uploads_data:/app/uploads:ro
    ports:
      - "127.0.0.1:8006:8006"
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  analytics:
    build:
      context: .
      dockerfile: services/analytics/Dockerfile.production
    container_name: course-creator-analytics
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - .env.production
    volumes:
      - logs_data:/var/log/course-creator
      - uploads_data:/app/uploads:ro
    ports:
      - "127.0.0.1:8007:8007"
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  organization-management:
    build:
      context: .
      dockerfile: services/organization-management/Dockerfile.production
    container_name: course-creator-organization-management
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - .env.production
    volumes:
      - logs_data:/var/log/course-creator
      - uploads_data:/app/uploads:ro
    ports:
      - "127.0.0.1:8008:8008"
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # ==========================================================================
  # FRONTEND AND REVERSE PROXY
  # ==========================================================================

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.production
    container_name: course-creator-frontend
    restart: unless-stopped
    volumes:
      - logs_data:/var/log/course-creator
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - course-creator-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  nginx:
    image: nginx:1.24-alpine
    container_name: course-creator-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx-security.conf:/etc/nginx/conf.d/security.conf:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - logs_data:/var/log/nginx
    networks:
      - course-creator-network
    depends_on:
      - frontend
      - user-management
      - course-generator
      - content-storage
      - course-management
      - content-management
      - lab-manager
      - analytics
      - organization-management
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # ==========================================================================
  # MONITORING AND LOGGING
  # ==========================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: course-creator-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - course-creator-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana:latest
    container_name: course-creator-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - ./deploy/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./deploy/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    networks:
      - course-creator-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # ==========================================================================
  # BACKUP SERVICE
  # ==========================================================================

  backup:
    build:
      context: .
      dockerfile: deploy/Dockerfile.backup
    container_name: course-creator-backup
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - BACKUP_SCHEDULE=${DATABASE_BACKUP_SCHEDULE:-0 2 * * *}
    env_file:
      - .env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - uploads_data:/app/uploads:ro
      - ./backups:/backups
      - logs_data:/var/log/course-creator
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true