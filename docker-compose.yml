services:
  # Shared Base Image for System Package Caching
  base-image:
    image: course-creator-base:latest
    build:
      context: .
      dockerfile: Dockerfile.base
      cache_from:
        - course-creator-base:latest
    # This service only exists to build the base image
    # Other services depend on it being built first
    command: "true"  # Do nothing, just build the image
    profiles: ["build-base"]  # Only run when specifically requested

  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: course_creator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data:/docker-entrypoint-initdb.d:ro
    ports:
      - "5433:5432"
    networks:
      - course-creator-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    # Removed external port mapping to avoid conflicts
    # Services communicate via internal Docker network
    networks:
      - course-creator-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Microservices
  user-management:
    image: course-creator-user-management:latest
    build:
      context: ./services/user-management
      dockerfile: Dockerfile
      cache_from:
        - course-creator-user-management:latest
    env_file:
      - .cc_env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator?options=-csearch_path=course_creator,public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_NAME=course_creator
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=user-management
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
    volumes:
      - ./.venv:/app/.venv:ro
      - ./shared:/app/shared:ro
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    ports:
      - "8000:8000"
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8000/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  course-generator:
    image: course-creator-course-generator:latest
    build:
      context: ./services/course-generator
      dockerfile: Dockerfile
      cache_from:
        - course-creator-course-generator:latest
    env_file:
      - .cc_env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator
      - REDIS_URL=redis://redis:6379
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - RAG_SERVICE_URL=https://rag-service:8009
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_NAME=course_creator
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=course-generator
      - LOG_LEVEL=INFO
      - ENVIRONMENT=docker
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
    volumes:
      - ./.venv:/app/.venv:ro
      - ./shared:/app/shared:ro
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rag-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8001/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  content-storage:
    image: course-creator-content-storage:latest
    build:
      context: ./services/content-storage
      dockerfile: Dockerfile
      cache_from:
        - course-creator-content-storage:latest
    env_file:
      - .cc_env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=content-storage
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
    ports:
      - "8003:8003"
    volumes:
      - ./.venv:/app/.venv:ro
      - ./shared:/app/shared:ro
      - content_files:/app/content_files
      - content_storage:/app/storage
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8003/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  course-management:
    image: course-creator-course-management:latest
    build:
      context: ./services/course-management
      dockerfile: Dockerfile
      cache_from:
        - course-creator-course-management:latest
    env_file:
      - .cc_env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=https://user-management:8000
      - COURSE_GENERATOR_URL=https://course-generator:8001
      - CONTENT_STORAGE_URL=https://content-storage:8003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_NAME=course_creator
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=course-management
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
      # Email Service Configuration
      - USE_MOCK_EMAIL=true
      - SMTP_SERVER=${SMTP_SERVER:-localhost}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-true}
      # Video Storage Configuration
      - VIDEO_STORAGE_PATH=/app/storage/videos
    ports:
      - "8004:8004"
    volumes:
      - ./.venv:/app/.venv:ro
      - ./storage/videos:/app/storage/videos
      - ./shared:/app/shared:ro
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-management:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8004/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  content-management:
    image: course-creator-content-management:latest
    build:
      context: ./services/content-management
      dockerfile: Dockerfile
      cache_from:
        - course-creator-content-management:latest
    env_file:
      - .cc_env
    environment:
      - USER_SERVICE_URL=https://user-management:8000
      - COURSE_GENERATOR_URL=https://course-generator:8001
      - CONTENT_STORAGE_URL=https://content-storage:8003
      - COURSE_MANAGEMENT_URL=https://course-management:8004
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator
      - REDIS_URL=redis://redis:6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_NAME=course_creator
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=content-management
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
    ports:
      - "8005:8005"
    volumes:
      - ./.venv:/app/.venv:ro
      - ./shared:/app/shared:ro
      - ./config:/app/config:ro
      - content_uploads:/app/uploads
      - content_exports:/app/exports
      - template_storage:/app/storage
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    depends_on:
      content-storage:
        condition: service_healthy
      course-generator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8005/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # RAG Service - AI Enhancement with ChromaDB
  rag-service:
    image: course-creator-rag-service:latest
    build:
      context: ./services/rag-service
      dockerfile: Dockerfile
      cache_from:
        - course-creator-rag-service:latest
    env_file:
      - .cc_env
    environment:
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=rag-service
      - LOG_LEVEL=INFO
      - CHROMADB_PATH=/app/chromadb_data
      - LOG_DIR=/var/log/course-creator
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
    ports:
      - "8009:8009"
    volumes:
      - ./.venv:/app/.venv:ro
      - ./shared:/app/shared:ro
      - rag_chromadb_data:/app/chromadb_data
      - rag_huggingface_cache:/app/.cache/huggingface
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8009/api/v1/rag/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Analytics Service
  analytics:
    image: course-creator-analytics:latest
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
      cache_from:
        - course-creator-analytics:latest
    env_file:
      - .cc_env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=https://user-management:8000
      - COURSE_SERVICE_URL=https://course-management:8004
      - LAB_SERVICE_URL=https://lab-manager:8006
      - RAG_SERVICE_URL=https://rag-service:8009
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_NAME=course_creator
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=analytics
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
    ports:
      - "8007:8007"
    volumes:
      - ./.venv:/app/.venv:ro
      - ./shared:/app/shared:ro
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-management:
        condition: service_healthy
      rag-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8007/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Organization Management Service  
  organization-management:
    image: course-creator-organization-management:latest
    build:
      context: ./services/organization-management
      dockerfile: Dockerfile
      cache_from:
        - course-creator-organization-management:latest
    env_file:
      - .cc_env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator?options=-csearch_path=course_creator,public
      - REDIS_URL=redis://redis:6379
      - USER_MANAGEMENT_URL=https://user-management:8000
      - COURSE_SERVICE_URL=https://course-management:8004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_NAME=course_creator
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=organization-management
      - LOG_LEVEL=INFO
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
    ports:
      - "8008:8008"
    volumes:
      - ./.venv:/app/.venv:ro
      - ./shared:/app/shared:ro
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-management:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8008/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Service
  frontend:
    image: course-creator-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
      cache_from:
        - course-creator-frontend:latest
    env_file:
      - .cc_env
    ports:
      - "3000:3000"  # HTTPS
      - "3001:80"    # HTTP (redirects to HTTPS)
    volumes:
      # Enable live reloading for development
      - ./frontend/js:/usr/share/nginx/html/js:ro
      - ./frontend/css:/usr/share/nginx/html/css:ro
      - ./frontend/html:/usr/share/nginx/html/html:ro
      - ./logs:/var/log/nginx
    networks:
      - course-creator-network
    depends_on:
      - user-management
      - course-management
      - content-management
      - analytics
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--no-check-certificate", "https://127.0.0.1:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Demo Service - Realistic Platform Demonstration
  demo-service:
    image: course-creator-demo-service:latest
    build:
      context: ./services/demo-service
      dockerfile: Dockerfile
      cache_from:
        - course-creator-demo-service:latest
    env_file:
      - .cc_env
    ports:
      - "8010:8010"
    volumes:
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8010/api/v1/demo/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Lab Container Management Service
  lab-manager:
    image: course-creator-lab-manager:latest
    build:
      context: ./services/lab-manager
      dockerfile: Dockerfile
      cache_from:
        - course-creator-lab-manager:latest
    # Run as root initially to setup Docker permissions, then su to appuser
    user: "0:0"
    env_file:
      - .cc_env
    environment:
      - LAB_IMAGE_REGISTRY=course-creator/labs
      - MAX_CONCURRENT_LABS=10
      - LAB_SESSION_TIMEOUT=3600
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator
      - REDIS_URL=redis://redis:6379
      - RAG_SERVICE_URL=https://rag-service:8009
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_NAME=course_creator
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=lab-containers
      - LOG_LEVEL=INFO
      - LAB_STORAGE_PATH=/home/bbrelin/course-creator/lab-storage
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - ./.venv:/app/.venv:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./lab-storage:/home/bbrelin/course-creator/lab-storage
      - ./logs:/var/log/course-creator
      - ./config:/home/bbrelin/course-creator/config:ro
      - ./ssl:/app/ssl:ro
    ports:
      - "8006:8006"
    networks:
      - course-creator-network
    depends_on:
      - course-management
      - rag-service
    # Custom command to setup Docker permissions and run as appuser
    command: >
      sh -c "
        # Get the Docker socket group ID from the mounted socket
        DOCKER_GID=$$(stat -c '%g' /var/run/docker.sock) &&
        echo 'Docker socket GID: '$$DOCKER_GID &&
        
        # Create or update docker group with correct GID
        if getent group $$DOCKER_GID >/dev/null 2>&1; then
          DOCKER_GROUP=$$(getent group $$DOCKER_GID | cut -d: -f1)
          echo 'Found existing group with GID '$$DOCKER_GID': '$$DOCKER_GROUP
        else
          groupadd -g $$DOCKER_GID docker
          DOCKER_GROUP=docker  
          echo 'Created docker group with GID '$$DOCKER_GID
        fi &&
        
        # Add appuser to docker group
        usermod -aG $$DOCKER_GROUP appuser &&
        echo 'Added appuser to group '$$DOCKER_GROUP &&
        
        # Verify appuser has docker group access
        groups appuser &&
        
        # Switch to appuser and run the application
        exec su appuser -c 'cd /app && python main.py'
      "
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('https://localhost:8006/health', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Metadata Service
  metadata-service:
    image: course-creator-metadata-service:latest
    build:
      context: ./services/metadata-service
      dockerfile: Dockerfile
      cache_from:
        - course-creator-metadata-service:latest
    env_file:
      - .cc_env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator
      - REDIS_URL=redis://redis:6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_NAME=course_creator
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=metadata-service
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app:/app/.venv/lib/python3.12/site-packages
      - VIRTUAL_ENV=/app/.venv
      - SSL_CERT_FILE=/app/ssl/nginx-selfsigned.crt
      - SSL_KEY_FILE=/app/ssl/nginx-selfsigned.key
    ports:
      - "8011:8011"
    volumes:
      - ./.venv:/app/.venv:ro
      - ./shared:/app/shared:ro
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import warnings; warnings.filterwarnings('ignore'); import requests; r = requests.get('https://localhost:8011/', verify=False); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  knowledge-graph-service:
    image: course-creator-knowledge-graph-service:latest
    build:
      context: ./services/knowledge-graph-service
      dockerfile: Dockerfile
      cache_from:
        - course-creator-knowledge-graph-service:latest
    env_file:
      - .cc_env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/course_creator
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - DB_NAME=course_creator
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - SERVICE_NAME=knowledge-graph-service
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - SSL_CERT_FILE=/app/ssl/nginx-selfsigned.crt
      - SSL_KEY_FILE=/app/ssl/nginx-selfsigned.key
    ports:
      - "8012:8012"
    volumes:
      - ./shared:/app/shared:ro
      - ./logs:/var/log/course-creator
      - ./ssl:/app/ssl:ro
    networks:
      - course-creator-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  nlp-preprocessing:
    image: course-creator-nlp-preprocessing:latest
    build:
      context: ./services/nlp-preprocessing
      dockerfile: Dockerfile
      cache_from:
        - course-creator-nlp-preprocessing:latest
    environment:
      - SERVICE_NAME=nlp-preprocessing
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    ports:
      - "8013:8013"
    volumes:
      - ./ssl:/app/certs:ro
      - ./logs:/var/log/course-creator
    networks:
      - course-creator-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped


volumes:
  postgres_data:
  redis_data:
  content_files:
  content_storage:
  content_uploads:
  content_exports:
  template_storage:
  lab_storage:
  rag_chromadb_data:
  rag_huggingface_cache:

networks:
  course-creator-network:
    name: course-creator_course-creator-network
    driver: bridge